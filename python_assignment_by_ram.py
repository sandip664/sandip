# -*- coding: utf-8 -*-
"""PYTHON ASSIGNMENT BY RAM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IE0f2H-ztDlotPcI0sngxv4uyLpaEOXh
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_iris
import seaborn as sns
train_losses = []
test_losses = []

link="https://raw.githubusercontent.com/kb22/Heart-Disease-Prediction/refs/heads/master/dataset.csv"
df=pd.read_csv(link)

df.head()

df.shape #total number of row and column

df['target'].unique()

df.isna()

features=df.drop(['target',], axis=1)
target=df['target']

X=features.values
y=target.values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)

y_train = pd.Series(y_train)
y_test = pd.Series(y_test)

# Normalize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

X_train=torch.tensor(X_train, dtype=torch.float32)
X_test=torch.tensor(X_test, dtype=torch.float32)

y_train = torch.tensor(y_train, dtype=torch.float32).view(-1, 1)
y_test = torch.tensor(y_test, dtype=torch.float32).view(-1, 1)

class SimpleBinaryClassifier(nn.Module):
    def __init__(self):
        super(SimpleBinaryClassifier, self).__init__()
        self.linear1 = nn.Linear(13, 1)
        # self.linear2 = nn.Linear(8,1)

    def forward(self, x):
        x = self.linear1(x)
        # x = self.linear2(x)
        return x

train_losses = []
test_losses = []

model = SimpleBinaryClassifier()

# Define the loss function and optimizer
loss_function = nn.BCEWithLogitsLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.009)
# Training loop
epochs = 500
for epoch in range(epochs):
    model.train()  # Set the model to training mode
    optimizer.zero_grad()  # Clear previous gradients

    # Forward pass on training set
    logits = model(X_train)
    loss = loss_function(logits, y_train)

    # Backward pass and optimization
    loss.backward()
    optimizer.step()

    # Append the training loss for each epoch
    train_losses.append(loss.item())

    # Evaluate on test set
    with torch.no_grad():  # Disable gradient computation during evaluation
        test_logits = model(X_test)  # Forward pass on test set
        test_loss = loss_function(test_logits, y_test)  # Compute test loss

    # Append the test loss for each epoch
    test_losses.append(test_loss.item())

    print(f"Epoch {epoch+1}/{epochs}, Train Loss: {loss.item():.4f}, Test Loss: {test_loss.item():.4f}")

# After training, plot the losses
plt.plot(train_losses, color='blue', label='Train Loss')
plt.plot(test_losses, color='red', label='Test Loss')

plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Train and Test Loss Over Epochs')

plt.legend()
plt.show()

with torch.no_grad():
    model.eval()
    test_logits = model(X_test)
    predictions = torch.sigmoid(test_logits) >= 0.5
    predicted_labels = (predictions > 0.5).float()
    accuracy = (predictions == y_test).sum().item() / y_test.size(0)
    print(f"Test Accuracy: {accuracy * 100:.2f}%")

print("Actual vs Predicted Targets:")
for actual, predicted in zip(y_test[:10], predicted_labels[:10]):  # Print first 10 results
    print(f"Actual: {actual.item()} - Predicted: {predicted.item()}")